<- KuKey.Services

-> {
    System
    System.Collections.Generic
    System.Linq
    System.Threading.Tasks

    KuKey.Models
    KuKey.Databases
}
# "SQLite 数据存储服务"
SQLiteDataStoreService := (path: str->$) {
    _Path = path
}
SQLiteDataStoreService := $ {
    IDataStoreService
    _Path: str

    QueryAsync := (func: (IQueryContext->>) ->>) {
        -> ctx := SQLiteContext(_Path) {
            func~>(SQLiteDataContext(ctx))
        }
    }

    SaveAsync := (func: (ISaveContext->>) ->>) {
        -> ctx := SQLiteContext(_Path) {
            func~>(SQLiteDataContext(ctx))
            ctx.SaveChangesAsync~>()
        }
    }
}

SQLiteDataContext := $ {
    IQueryContext
    ISaveContext
    _ctx: SQLiteContext

    [Set T:BaseModel] := (-> r: [IQueryable T]) {
        <- _ctx.[Set T]()
    }

    [Create T:BaseModel] := (item: T ->) {
        _ctx.[Set T]().Add(item)
    }

    [Update T:BaseModel] := (item: T ->) {
        _ctx.[Set T]().Update(item)
    }

    [Delete T:BaseModel] := (id: str ->) {
        _ctx.[Set T]().Where{i->i.Id==id} @ item {
            _ctx.[Set T]().Remove(item)
        }
    }
}
SQLiteDataContext := (ctx: SQLiteContext->$) {
    _ctx = ctx
}

##SQLiteContext
