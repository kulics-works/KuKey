<- KuKey.Core

-> {
    System
    System.Linq

    Microsoft.EntityFrameworkCore

    Newtonsoft.Json
    
    KuKey.Models
    KuKey.Databases
    KuKey.Services
}

-- 主程序
DefaultKuKey = (databasePath : str, masterPassword : str->$me) {     -- 使用默认服务
    me._DataStoreService = SQLiteDataStoreService(databasePath)
    me._EncryptService = AESEncryptService(masterPassword)
}
DefaultKuKey = (dataSrv : IDataStoreService, encryptSrv : IEncryptService->$me) {   -- 使用自定义服务
    me._DataStoreService = dataSrv
    me._EncryptService = encryptSrv
}
DefaultKuKey = $ me {
    . IKuKey
    -- 存储服务
    _DataStoreService : IDataStoreService
    -- 加密服务
    _EncryptService : IEncryptService
    -- 实现接口
    UpdateEncryptService = (srv : IEncryptService->) {
        me._EncryptService = srv
    }

    UpdateEncryptData = (srv : IEncryptService->>) {
        keys = list`KeyModel{}
        keyGroups = list`KeyGroupModel{}
        me._DataStoreService.QueryAsync~>( (ctx>) {
            ctx.Set`KeyModel() @ item {
                r, b = item.Decrypt(me._EncryptService)
                b ? {
                    keys.add(r !! KeyModel)
                }
            }
            ctx.Set`KeyGroupModel() @ item {
                r, b = item.Decrypt(me._EncryptService)
                b ? {
                    keyGroups.add(r !! KeyGroupModel)
                }
            }
        })
        me._DataStoreService.SaveAsync~>( (ctx>) { 
            keys @ item {
                ctx.Update(item.Encrypt(srv) !! KeyModel)
            }
            keyGroups @ item {
                ctx.Update(item.Encrypt(srv) !! KeyGroupModel)
            }
        })
        me._EncryptService = srv
    }

    QueryAsync = (func : (ICoreQueryContext->>) ->>) {
        me._DataStoreService.QueryAsync~>( (ctx) { 
            func~>(CoreQueryContext(ctx, me._EncryptService))
        })
    }

    SaveAsync = (func : (ICoreSaveContext->>) ->>) {
        me._DataStoreService.SaveAsync~>( (ctx) { 
            func~>(CoreSaveContext(ctx, me._EncryptService))
        })
    }

    Export = (->>text : str) {
        !text = ""
        QueryAsync~>( (ctx>) {
            text = JsonConvert.SerializeObject(KuKeyFormat{
                Key = ctx.Set`KeyModel().to_list()
                KeyGroup = ctx.Set`KeyGroupModel().to_list()
            })
        })
        <- text
    }

    -- 导入
    _Import`(T:BaseModel) = (ctx : ICoreSaveContext, item : T ->) {
        data = ctx.Set`T().FirstOrDefault((i){i.Id==item.Id})
        data >< nil ? {
            data.UpdateAt < item.UpdateAt ? {
                ctx.Update(item)
            }
        }
        | ? {
            ctx.Create(item)
        }
    }

    Import = (text : str->>) {
        SaveAsync~>( (ctx>) {
            source = JsonConvert.DeserializeObject`KuKeyFormat(text)
            -- 逐条导入数据
            source.Key @ v {
                me._Import(ctx, v)
            }
            source.KeyGroup @ v {
                me._Import(ctx, v)
            }
        })
    }

    FormatExport = (->>text : str) {
        !text = ""
        me.QueryAsync~>( (ctx) {
            keys = list`FormatKeyModel{} 
            ctx.Set`KeyModel().ToListAsync~>() @ item {
                keys += FormatKeyModel{}.FromKeyModel(ctx.Decrypt(item).r)
            }
            text = JsonConvert.SerializeObject(OpenFormat{
                Key = keys
            })
        })
        <- text
    }

    FormatImport = (text : str->>) {
        SaveAsync~>( (ctx>) {
            source = JsonConvert.DeserializeObject`OpenFormat(text)
            -- 逐条导入数据
            source.Key @ v {
                ctx.Create(v.ToKeyModel())
            }
        })
    }

    GeneratePassword = (len : int, number : bool, lower : bool, upper : bool, symbol : bool->v : str) {
        <- me._EncryptService.GeneratePassword(len, number, lower, upper, symbol)
    }
}

KuKeyFormat = $ {
    Key         : list`KeyModel
    KeyGroup    : list`KeyGroupModel
    Version = 1
}

OpenFormat = $ {
    [JsonProperty("key")]
    Key : list`FormatKeyModel
    [JsonProperty("version")]
    Version = 1
}

CoreQueryContext = $ me {
    . ICoreQueryContext
    _DataContext : IQueryContext
    _EncryptService : IEncryptService 

    Set`(T:BaseModel) = (-> r : IQueryable`T) {
        <- me._DataContext.Set`T()
    }

    Decrypt`(T:BaseModel) = (item : T->r : T, b : bool) {
        r, b = item.Decrypt(me._EncryptService)
        <- r !! T, b
    }
}
CoreQueryContext = (ctx : IQueryContext, srv : IEncryptService->$me) {
    me._DataContext = ctx
    me._EncryptService = srv
}

CoreSaveContext = $ me {
    . ICoreSaveContext
    _DataContext : ISaveContext
    _EncryptService : IEncryptService

    Set`(T:BaseModel) = (-> r : IQueryable`T) {
        <- me._DataContext.Set`T()
    }

    Decrypt`(T:BaseModel) = (item : T->r : T, b : bool) {
        r, b = item.Decrypt(me._EncryptService)
        <- r !! T, b
    }

    Create`(T:BaseModel) = (item : T -> id : str) {
        item.Id = Guid.NewGuid().ToString()
        time = (DateTime.UtcNow - DateTime(1970, 1, 1)).TotalMilliseconds / 1000 !! int
        item.CreateAt = time
        item.UpdateAt = time
        me._DataContext.Create(item.Encrypt(me._EncryptService) !! T)
        <- item.Id
    }

    Update`(T:BaseModel) = (item : T ->) {
        time = (DateTime.UtcNow - DateTime(1970, 1, 1)).TotalMilliseconds / 1000 !! int
        item.UpdateAt = time
        me._DataContext.Update(item.Encrypt(me._EncryptService) !! T)
    }

    Delete`(T:BaseModel) = (item : T ->) {
        me._DataContext.Delete`T(item)
    }
}
CoreSaveContext = (ctx : ISaveContext, srv : IEncryptService->$me) {
    me._DataContext = ctx
    me._EncryptService = srv
}

##SQLiteDataStoreService
##AESEncryptService
##DateTime
